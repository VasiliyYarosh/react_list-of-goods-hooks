{"version":3,"sources":["App.tsx","index.tsx"],"names":["Metods","goodsFromServer","defSorting","method","isReversed","App","useState","sortBy","setSortBy","goods","getGoods","Alphabet","sort","good1","good2","localeCompare","Length","length","reverse","preparedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,iFAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAa,CACjBC,OAAQ,GACRC,YAAY,I,SAGTJ,K,oBAAAA,E,iBAAAA,M,KA+BE,IAAMK,EAAM,WACjB,MAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAvBR,SACEA,EADF,GAGa,IADTN,EACQ,EADRA,OAAQC,EACA,EADAA,WAEJM,EAAQ,YAAOD,GAcrB,OAZIN,IAAWH,EAAOW,UACpBD,EAASE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAGlDX,IAAWH,EAAOgB,QACpBN,EAASE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAGnDb,GACFM,EAASQ,UAGJR,EAKOS,CAAclB,EAAiBM,GAe7C,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMd,EAAU,2BAAKD,GAAN,IAAcJ,OAAQH,EAAOW,aACrDS,UACEG,IACE,SACA,UACA,CACE,WAAYhB,EAAOJ,SAAWH,EAAOW,WAR7C,iCAgBA,wBACEU,KAAK,SACLC,QAAS,kBAAMd,EAAU,2BAAKD,GAAN,IAAcJ,OAAQH,EAAOgB,WACrDI,UACEG,IACE,SACA,aACA,CACE,WAAYhB,EAAOJ,SAAWH,EAAOgB,SAR7C,4BAgBA,wBACEK,KAAK,SACLC,QA3Cc,WACpBd,EAAU,2BACHD,GADE,IACMH,YAAaG,EAAOH,eA0C7BgB,UAAWG,IACT,SACA,aACA,CACE,YAAahB,EAAOH,aAP1B,sBAcEG,EAAOJ,QAAUI,EAAOH,aACxB,wBACEiB,KAAK,SACLC,QAjEiB,WACzBd,EAAU,CACRL,OAAQ,GACRC,YAAY,KA+DNgB,UAAU,4BAHZ,sBAUJ,6BACGX,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YClIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f4b8b20b.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst defSorting = {\n  method: '',\n  isReversed: false,\n};\n\nenum Metods {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ntype SortingOptions = {\n  method: string;\n  isReversed: boolean;\n};\n\nfunction preparedGoods(\n  goods: string[],\n  { method, isReversed }: SortingOptions,\n): string[] {\n  const getGoods = [...goods];\n\n  if (method === Metods.Alphabet) {\n    getGoods.sort((good1, good2) => good1.localeCompare(good2));\n  }\n\n  if (method === Metods.Length) {\n    getGoods.sort((good1, good2) => good1.length - good2.length);\n  }\n\n  if (isReversed) {\n    getGoods.reverse();\n  }\n\n  return getGoods;\n}\n\nexport const App = () => {\n  const [sortBy, setSortBy] = useState(defSorting);\n  const goods = preparedGoods(goodsFromServer, sortBy);\n\n  const handleResetSorting = () => {\n    setSortBy({\n      method: '',\n      isReversed: false,\n    });\n  };\n\n  const handleReverse = () => {\n    setSortBy(\n      { ...sortBy, isReversed: !sortBy.isReversed },\n    );\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortBy({ ...sortBy, method: Metods.Alphabet })}\n          className={\n            classNames(\n              'button',\n              'is-info',\n              {\n                'is-light': sortBy.method !== Metods.Alphabet,\n              },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortBy({ ...sortBy, method: Metods.Length })}\n          className={\n            classNames(\n              'button',\n              'is-success',\n              {\n                'is-light': sortBy.method !== Metods.Length,\n              },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverse}\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': !sortBy.isReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortBy.method || sortBy.isReversed) && (\n          <button\n            type=\"button\"\n            onClick={handleResetSorting}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}