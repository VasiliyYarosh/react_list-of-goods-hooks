{"version":3,"sources":["App.tsx","index.tsx"],"names":["Metods","goodsFromServer","defSorting","method","isReversed","App","useState","sortBy","setSortBy","goods","getGoods","Alphabet","sort","good1","good2","localeCompare","Length","length","reverse","preparedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAoJKA,E,iFAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAa,CACxBC,OAAQ,GACRC,YAAY,I,SAGTJ,K,oBAAAA,E,iBAAAA,M,KA+BE,IAAMK,EAAM,WACjB,MAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAvBR,SACEA,EADF,GAGa,IADTN,EACQ,EADRA,OAAQC,EACA,EADAA,WAEJM,EAAQ,YAAOD,GAcrB,OAZIN,IAAWH,EAAOW,UACpBD,EAASE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAGlDX,IAAWH,EAAOgB,QACpBN,EAASE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAGnDb,GACFM,EAASQ,UAGJR,EAKOS,CAAclB,EAAiBM,GAiB7C,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMd,EAAU,2BAAKD,GAAN,IAAcJ,OAAQH,EAAOW,aACrDS,UACEG,IACE,SACA,UACA,CACE,WAA8B,aAAlBhB,EAAOJ,SAR3B,iCAgBA,wBACEkB,KAAK,SACLC,QAAS,kBAAMd,EAAU,2BAAKD,GAAN,IAAcJ,OAAQH,EAAOgB,WACrDI,UACEG,IACE,SACA,aACA,CACE,WAA8B,WAAlBhB,EAAOJ,SAR3B,4BAgBA,wBACEkB,KAAK,SACLC,QA7Cc,WACpBd,EACED,EAAOH,WAAP,2BACSG,GADT,IACiBH,YAAY,IAD7B,2BAESG,GAFT,IAEiBH,YAAY,MA0CzBgB,UAAWG,IACT,SACA,aACA,CACE,YAAahB,EAAOH,aAP1B,sBAcEG,EAAOJ,QAAUI,EAAOH,aACxB,wBACEiB,KAAK,SACLC,QAnEiB,WACzBd,EAAU,CACRL,OAAQ,GACRC,YAAY,KAiENgB,UAAU,4BAHZ,sBAUJ,6BACGX,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjQlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e71e5cf9.chunk.js","sourcesContent":["// import React, { useState } from 'react';\n// import 'bulma/css/bulma.css';\n// import './App.scss';\n// import classNames from 'classnames';\n\n// export const goodsFromServer = [\n//   'Dumplings',\n//   'Carrot',\n//   'Eggs',\n//   'Ice cream',\n//   'Apple',\n//   'Bread',\n//   'Fish',\n//   'Honey',\n//   'Jam',\n//   'Garlic',\n// ];\n\n// interface SortBy {\n//   alphabet?: boolean;\n//   length?: boolean;\n//   isReversed?: boolean;\n// }\n\n// function preparedGoods(\n//   goods: string[],\n//   { alphabet, length, isReversed }: SortBy,\n// ) {\n//   const getGoods = [...goods];\n\n//   if (alphabet) {\n//     getGoods.sort((good1, good2) => good1.localeCompare(good2));\n//   }\n\n//   if (length) {\n//     getGoods.sort((good1, good2) => good1.length - good2.length);\n//   }\n\n//   if (isReversed) {\n//     getGoods.reverse();\n//   }\n\n//   return getGoods;\n// }\n\n// export const App: React.FC = () => {\n//   const [sortBy, setSortBy] = useState<SortBy>({});\n//   const goods = preparedGoods(goodsFromServer, sortBy);\n\n//   return (\n//     <div className=\"section content\">\n//       <div className=\"buttons\">\n//         <button\n//           type=\"button\"\n//           onClick={() => setSortBy(\n//             { ...sortBy, alphabet: true, length: false },\n//           )}\n//           className={classNames(\n//             'button',\n//             'is-info',\n//             {\n//               'is-light': sortBy.alphabet !== true,\n//             },\n//           )}\n//         >\n//           Sort alphabetically\n//         </button>\n\n//         <button\n//           type=\"button\"\n//           onClick={() => setSortBy(\n//             { ...sortBy, length: true, alphabet: false },\n//           )}\n//           className={classNames(\n//             'button',\n//             'is-success',\n//             {\n//               'is-light': sortBy.length !== true,\n//             },\n//           )}\n//         >\n//           Sort by length\n//         </button>\n\n//         <button\n//           type=\"button\"\n//           onClick={() => setSortBy(\n//             { ...sortBy, isReversed: !sortBy.isReversed },\n//           )}\n//           className={classNames(\n//             'button',\n//             'is-warning',\n//             {\n//               'is-light': !sortBy.isReversed,\n//             },\n//           )}\n//         >\n//           Reverse\n//         </button>\n\n//         {(sortBy.alphabet || sortBy.length || sortBy.isReversed) && (\n//           <button\n//             type=\"button\"\n//             onClick={() => setSortBy({\n//               alphabet: false,\n//               length: false,\n//               isReversed: false,\n//             })}\n//             className=\"button is-danger is-light\"\n//           >\n//             Reset\n//           </button>\n//         )}\n//       </div>\n\n//       <ul>\n//         {goods.map((good, index) => (\n//           // eslint-disable-next-line react/no-array-index-key\n//           <li key={index} data-cy=\"Good\">{good}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const defSorting = {\n  method: '',\n  isReversed: false,\n};\n\nenum Metods {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ntype SortingOptions = {\n  method: string;\n  isReversed: boolean;\n};\n\nfunction preparedGoods(\n  goods: string[],\n  { method, isReversed }: SortingOptions,\n): string[] {\n  const getGoods = [...goods];\n\n  if (method === Metods.Alphabet) {\n    getGoods.sort((good1, good2) => good1.localeCompare(good2));\n  }\n\n  if (method === Metods.Length) {\n    getGoods.sort((good1, good2) => good1.length - good2.length);\n  }\n\n  if (isReversed) {\n    getGoods.reverse();\n  }\n\n  return getGoods;\n}\n\nexport const App = () => {\n  const [sortBy, setSortBy] = useState(defSorting);\n  const goods = preparedGoods(goodsFromServer, sortBy);\n\n  const handleResetSorting = () => {\n    setSortBy({\n      method: '',\n      isReversed: false,\n    });\n  };\n\n  const handleReverse = () => {\n    setSortBy(\n      sortBy.isReversed\n        ? { ...sortBy, isReversed: false }\n        : { ...sortBy, isReversed: true },\n    );\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortBy({ ...sortBy, method: Metods.Alphabet })}\n          className={\n            classNames(\n              'button',\n              'is-info',\n              {\n                'is-light': sortBy.method !== 'alphabet',\n              },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortBy({ ...sortBy, method: Metods.Length })}\n          className={\n            classNames(\n              'button',\n              'is-success',\n              {\n                'is-light': sortBy.method !== 'length',\n              },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverse}\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': !sortBy.isReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortBy.method || sortBy.isReversed) && (\n          <button\n            type=\"button\"\n            onClick={handleResetSorting}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}